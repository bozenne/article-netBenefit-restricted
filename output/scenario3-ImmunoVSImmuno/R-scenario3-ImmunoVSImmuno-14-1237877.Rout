
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## * Header
> ## path <- "h:/SundKonsolidering_BioStatHome/Cluster/GPC/article-restricted/"
> ## setwd(path)
> ## source("BATCH_scenario3.R")
> ## sbatch -a 1-1 -J 'scenario3-ImmunoVSImmuno' --output=/dev/null --error=/dev/null R CMD BATCH --vanilla BATCH_scenario3.R /dev/null 
> ## R CMD BATCH --vanilla '--args iter_sim=1 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-1.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=2 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-2.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=3 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-3.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=4 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-4.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=5 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-5.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=6 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-6.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=7 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-7.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=8 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-8.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=9 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-9.Rout &
> ## R CMD BATCH --vanilla '--args iter_sim=10 n.iter_sim=10' BATCH_scenario3-ImmunoVSImmuno.R output/scenario3-ImmunoVSImmuno/R-ImmunoVSImmuno-10.Rout &
> 
> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 270604 14.5     665617 35.6   408739 21.9
Vcells 451653  3.5    8388608 64.0  1819181 13.9
> 
> ## * Seed
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ } ## interactive
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 10}
> cat("iteration ",iter_sim," over ",n.iter_sim,"\n",sep="")
iteration 14 over 100
> 
> set.seed(1)
> seqSeed <- sample(1:max(1e5,n.iter_sim),size=n.iter_sim,replace=FALSE)
> iSeed <- seqSeed[iter_sim]
> set.seed(iSeed)
> 
> cat("seed: ",iSeed,"\n")
seed:  43809 
> 
> ## * Prepare export
> path <- "."
> path.res <- file.path(path,"Results","scenario3-ImmunoVSImmuno")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","scenario3-ImmunoVSImmuno")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> 
> ## * Libraries
> require(survival)
Loading required package: survival
> require(BuyseTest) ## install.packages("BuyseTest")
Loading required package: BuyseTest
Loading required package: Rcpp
BuyseTest version 2.3.11
> require(survRM2) ## install.packages("survRM2")
Loading required package: survRM2
> 
> ## * Settings
> n.sim <- 1000
> 
> Tps.inclusion <- 12 
> Restriction.time_list <- c(12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60) ## every 3 months
> Threshold_list <- c(0,6,12) ## 0,6,12
> TpsFin <- 60
> 
> grid <- expand.grid(restrictionTime = Restriction.time_list,
+                     threshold = Threshold_list,
+                     scenario = 0)
> 
> grid <- rbind(grid,
+               cbind(restrictionTime = Restriction.time_list,
+                     threshold = 0.1*Restriction.time_list,
+                     scenario = 1))
> 
> ## * Loop
> res <- NULL
> for(iSim in 1:n.sim){
+     cat(iSim,": ")
+     for (iGrid in 1:NROW(grid)){ 
+         cat("*")
+ 
+         iThreshold <- grid$threshold[iGrid]
+         iTime <- grid$restrictionTime[iGrid]
+         iScenario <- grid$scenario[iGrid]
+ 
+         ## ** Generate data
+         HR1C <- 0.1
+         HR1T <- 0.1
+       
+         TpsFin <- 60
+         HazC <- 0.1
+         HazT <- 0.07
+       
+         HazT2T <- HazT*(0.75+0.25*HR1T)
+         HazT3T <- HazT*(0.5+0.5*HR1T)
+         HazT4T <- HazT*(0.25+0.75*HR1T)
+         HazT5T <- HazT*(HR1T)
+       
+         HazT2C <- HazC*(0.75+0.25*HR1C)
+         HazT3C <- HazC*(0.5+0.5*HR1C)
+         HazT4C <- HazC*(0.25+0.75*HR1C)
+         HazT5C <- HazC*(HR1C)
+       
+         t1 <- 3
+         t2 <- 12
+         t3 <- 17.75
+         t4 <- 24
+         n.Treatment <- 200
+         n.Control <- 200
+         n <- n.Treatment+n.Control
+         group <- c(rep(1, n.Treatment),rep(0, n.Control))
+       
+         ## *** in control group
+         TimeEvent.Ctr1 <- rexp(n.Control,HazC)
+         TimeEvent.Ctr2 <- rexp(n.Control,HazT2C)
+         TimeEvent.Ctr3 <- rexp(n.Control,HazT3C)
+         TimeEvent.Ctr4 <- rexp(n.Control,HazT4C)
+         TimeEvent.Ctr5 <- rexp(n.Control,HazT5C)
+       
+         TimeEvent.Ctr <- ifelse(TimeEvent.Ctr1<t1,TimeEvent.Ctr1,
+                          ifelse(t1+TimeEvent.Ctr2<t2,t1+TimeEvent.Ctr2,
+                          ifelse(t2+TimeEvent.Ctr3<t3,t2+TimeEvent.Ctr3,
+                          ifelse(t3+TimeEvent.Ctr4<t4,t3+TimeEvent.Ctr4,
+                                 t4+TimeEvent.Ctr5))))
+       
+         ## *** in treatment group
+         TimeEvent.Tr1 <- rexp(n.Control,HazT)
+         TimeEvent.Tr2 <- rexp(n.Control,HazT2T)
+         TimeEvent.Tr3 <- rexp(n.Control,HazT3T)
+         TimeEvent.Tr4 <- rexp(n.Control,HazT4T)
+         TimeEvent.Tr5 <- rexp(n.Control,HazT5T)
+       
+         TimeEvent.Tr <- ifelse(TimeEvent.Tr1<t1,TimeEvent.Tr1,
+                         ifelse(t1+TimeEvent.Tr2<t2,t1+TimeEvent.Tr2,
+                         ifelse(t2+TimeEvent.Tr3<t3,t2+TimeEvent.Tr3,
+                         ifelse(t3+TimeEvent.Tr4<t4,t3+TimeEvent.Tr4,
+                                t4+TimeEvent.Tr5))))
+       
+         TimeEvent <- c(TimeEvent.Tr,TimeEvent.Ctr)
+         Time.Cens <- runif(n,TpsFin-Tps.inclusion,TpsFin) #varier temps de censure
+         Time <- pmin(Time.Cens,TimeEvent)
+         Event <- Time==TimeEvent
+         Event <- as.numeric(Event)
+         tab <- data.frame(group,Time,Event)
+   
+         ## ** Analysis using LR
+         LR <- (survdiff(Surv(time=Time, event=Event) ~ group, data=tab, rho=0))
+         pval.LR <- 1 - pchisq(LR$chisq, 1) 
+         Taux.cens.reel <- 1-mean(Event)
+   
+         ## ** analysis using RNBGehan
+         RNBGehan <- BuyseTest(data=tab,group ~ TTE(Time, status=Event, iThreshold),
+                               method.inference = "u-statistic", scoring.rule = "Gehan", trace = 0)
+         RNBGehanSum <- confint(RNBGehan)
+         RNBenefit.Gehan <- RNBGehanSum[,"estimate"]
+         pval.RNBGehan <- RNBGehanSum[,"p.value"]
+ 
+         ## ** Analysis using RMST
+         RMST <- rmst2(time=Time, status=Event, arm=group, tau = NULL, covariates = NULL, alpha = 0.05)
+         pval.RMSTdif <- RMST[["unadjusted.result"]][1,4]
+         pval.RMSTratio <- RMST[["unadjusted.result"]][2,4]
+   
+         ## ** Analysis using WLR
+         WLR <- (survdiff(Surv(time=Time, event=Event) ~ group, data=tab, rho=1))
+         pval.WLR <- 1 - pchisq(WLR$chisq, 1) 
+ 
+         ## ** Analysis using RNBPeron
+         rBuyseresPer <- BuyseTest(data=tab,group ~ TTE(Time, status=Event, iThreshold, restriction=iTime),
+                                   method.inference = "u-statistic", scoring.rule = "Peron", trace = 0)
+         rBuyseresPerSum <- confint(rBuyseresPer)
+         rBenefit.Buyse <- rBuyseresPerSum[,"estimate"]
+         pval.rBuyse <- rBuyseresPerSum[,"p.value"]
+   
+         ## ** créer la table de résultats
+         res <- rbind(res,c(iteration = iSim,
+                            Restriction_time = iTime,
+                            scenario = iScenario,
+                            Threshold = iThreshold,
+                            "Taux censure reel" = Taux.cens.reel,
+                            pvalLOGRANK = pval.LR,
+                            RNBenefit.Gehan = RNBenefit.Gehan,
+                            pval.RNBGehan = pval.RNBGehan,
+                            RNB = rBenefit.Buyse,
+                            pvalRNB = pval.rBuyse,
+                            pvalWeightedLOGRANK = pval.WLR,
+                            pvalRMSTdif = pval.RMSTdif,
+                            pvalRMSTratio = pval.RMSTratio))
+ 
+     }
+     saveRDS(res, file = file.path(path.res,paste0("simul_ImmunoVSImmuno_",iter_sim,"(tempo).rds")))
+     cat("\n")
+ }
1 : *